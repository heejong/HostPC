//==============================================================================
/** @file UI_Common.h                          
    @brief This file provides the utility structures and functions common to several user interface panels.

### HARDWARE/FIRMWARE ENVIRONMENT
      OS    |    HW type     |    HW ver.   |          FW ver.  
	--------|----------------|--------------|-------------------------  
      Win   |    Host PC     |     N/A      |           N/A
	  
### FILE REFERENCES
    none     
	
### EXTERNAL VARIABLES
    none    
	
### EXTERNAL REFERENCES
    none     
	
### ABNORMAL TERMINATION CONDITIONS, ERROR AND WARNING MESSAGES
    Error: empty stack found in call to Stack_Peek()
	 - In a call to the function Stack_Peek(), an instance of the struct Stack was found to be empty
	 
	Error: exceeded stack range on attempt to push
	 - In a call to the function StackPush(), the limit of STACK_MAXSIZE was reached. It is defined in this
	   file and can be increased as needed.
	   
	Error: empty stack found on attempt to pop
	 - In a call to the function StackPop(), an instance of the struct Stack was found to be empty
	 
	Other errors may be generated by CVI/LabWindows. The LabWindows documentation is available online 
	at "http://zone.ni.com/reference/en-XX/help/370051V-01/".
	
### ASSUMPTIONS, CONSTRAINTS, RESTRICTIONS
	To call functions and structures in this file "UI_Common.h" must be added to the include path.
	Assumptions for each variable and function are listed individually.	
	
### NOTES
	As much common functionality as possible was added to this file to reduce redundancy in other files. 
	Functions and controls that had to be defined individually are defined in the .c files that have been 
	given the same names as the .uir files to which they correspond. Most notably, the tree control event
	implementation had to be defined seperately, but the tree panels are initialized from a single function
	defined in this file.
	
###	ALGORITHM
	The algorithm used for each function is defined with the function it describes.	
	
###	DEVELOPMENT HISTORY
       Date    |  Author         |  Email Address     | Ver. |Description Of Change  
	   --------|-----------------|--------------------|------|---------------------
	 08/09/2013| George Netscher | gmnetscher@lbl.gov | 1.0  |final version concluding summer work
	 
### Copyright (c) 2013 by LBNL. All Rights Reserved.
*/
//==============================================================================

#ifndef __UI_Common_H__
#define __UI_Common_H__

#ifdef __cplusplus
    extern "C" {
#endif

//==============================================================================
// Include files

#include "cvidef.h"

//==============================================================================
// Constants
#define STACK_MAXSIZE 10  
		
//==============================================================================
// Types

// used to keep window in the same location when changing between panels
/*		
typedef struct PanelAppearance {
	// panel size
	int height;
	int width;
	// panel position
	int top;
	int left;
} PanelAppearance;
*/

// stack provides data structure with lowest implementation cost to give location along panel tree 
// note this is not a general implementation - limited to int and predefined size
// no need to deal with malloc and void* for this narrow use case
typedef struct Stack {
    // stack values
	int data[STACK_MAXSIZE]; 
    int current_size;
} Stack;

typedef struct OpenPETTree {
	// describes OpenPET hardware tree
	short int MB;
	short int DUC;
	short int DB;
	char mode[20]; // Time Mode, Energy Mode, Test Mode 1, Test Mode 2, Flood Map Mode, User Mode
} OpenPETTree;

typedef struct Header {
	char filename[50];
	char usercomments[200];
	double datetime; 
	double duration;
	char datatype[10];
	double timewindow;
	unsigned short int softwareversion;
	unsigned short int firmwareversion;
	// more can be added if necessary
} Header;


//==============================================================================
// External variables

//==============================================================================
// Global functions

int CVICALLBACK Quit (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2);

int CVICALLBACK Main (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2);

int CVICALLBACK Back (int panel, int control, int event,
		void *callbackData, int eventData1, int eventData2);

// stack functions
void StackInit(Stack *S);
int StackPeek(Stack *S);
int StackEmpty(Stack *S);
int StackPush(Stack *S, int d);
int StackPop(Stack *S);

void OpenPETTreeInit(OpenPETTree *T);

Header CreateHeader(char filename[], char usercomments[], double duration, char datatype[]/*, double timewindow, unsigned short int sofwareversion, unsigned short int firmware version */);

int CheckButtonEventError(char control_name[]);

//void SaveXMLHeader(void);
//void SavePanelAppearance(int panel, PanelAppearance *appearance);
//void RecallPanelAppearance(int panel, PanelAppearance *appearance);


#ifdef __cplusplus
    }
#endif

#endif  /* ndef __UI_Common_H__ */
